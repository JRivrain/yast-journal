require 'yast'
require 'systemd_journal/dialogs/filter'
require 'systemd_journal/dialogs/helpers'

Yast.import "UI"
Yast.import "Label"

module SystemdJournal
  module Dialogs
    # Dialog to display journal entries with several filtering options
    class Entries

      include Yast::UIShortcuts
      include Yast::I18n
      include Yast::Logger
      include Helpers


      def initialize
        textdomain "systemd_journal"

        @filter = {
          time: :current_boot,
          source: :all,
          since: Time.now - 24*60*60,
          until: Time.now
        }
        @search = ""
        read_journal_entries
      end
       
      # Displays the dialog
      def run
        return unless create_dialog

        begin
          return event_loop
        ensure
          close_dialog
        end
      end

    private

      # Draws the dialog
      def create_dialog
        Yast::UI.OpenDialog(
          Opt(:decorated, :defaultsize),
          VBox(
            # Header
            Heading(_("Journal entries")),
            # Filters
            Left(
              HBox(
                Label(_("Displaying entries with the following text")),
                HSpacing(1),
                InputField(Id(:search), Opt(:hstretch, :notify), "", @search)
              )
            ),
            Left(ReplacePoint(Id(:time_label), Label(time))),
            Left(ReplacePoint(Id(:source_label), Label(source))),
            VSpacing(0.3),
            # Log entries
            table,
            VSpacing(0.3),
            # Footer buttons
            HBox(
              HWeight(1, PushButton(Id(:filter), _("Change filter..."))),
              HStretch(),
              HWeight(1, PushButton(Id(:refresh), _("Refresh"))),
              HStretch(),
              HWeight(1, PushButton(Id(:cancel), Yast::Label.QuitButton))
            )
          )
        )
      end

      def close_dialog
        Yast::UI.CloseDialog
      end

      # Simple event loop. For each event generated by the interface, a method
      # named like the event but with the suffix '_callback' is called. If it
      # returns false, the loop is stopped and the whole dialog is closed.
      def event_loop
        keep_running = true
        while keep_running
          input = Yast::UI.UserInput
          method = :"#{input}_callback"
          if respond_to?(method, true)
            keep_running = send(method)
          else
            log.warn "Method #{method} not implemented"
          end
        end
      end

      # Table widget (plus wrappers) to display log entries
      def table
        Table(
          Id(:table),
          Opt(:keepSorting),
          Header(
            _("Time"),
            _("Process"),
            _("Message"),
          ),
          table_items
        )
      end

      def table_items
        # Reduce it to an array with only the visible fields
        entries_fields = @journal_entries.map do |entry|
          [
            entry.timestamp.strftime(TIME_FORMAT),
            entry.process_name,
            entry.message
          ]
        end
        # Grep for entries matching @search in any visible field
        entries_fields.select! do |fields|
          fields.any? {|f| Regexp.new(@search, Regexp::IGNORECASE).match(f) }
        end
        # Return the result as an array of Items
        entries_fields.map {|fields| Item(*fields) }
      end

      def redraw_filter
        Yast::UI.ReplaceWidget(Id(:time_label), Label(time))
        Yast::UI.ReplaceWidget(Id(:source_label), Label(source))
      end

      def redraw_table
        Yast::UI.ChangeWidget(Id(:table), :Items, table_items)
      end

      def source
        source_description(@filter)
      end

      def time
        time_description(@filter)
      end

      # Event callback for quit button and window closing
      def cancel_callback
        false
      end

      # Event callback for the 'change filter' button.
      def filter_callback
        read_filter
        read_journal_entries
        redraw_filter
        redraw_table
        true
      end

      # Event callback for change in the content of the search box
      def search_callback
        read_search
        redraw_table
        true
      end

      # Event callback for the 'refresh' button
      def refresh_callback
        read_journal_entries
        redraw_table
        true
      end

      # Asks the user the new filter options using SystemdJournal::FilterDialog.
      #
      # @see SystemdJournal::FilterDialog
      def read_filter
        filter = Filter.new(@filter).run
        @filter.merge!(filter)
        log.info "FilterDialog returned #{filter}. New filter is #{@filter}."
      end

      # Gets the new search string from the interface
      def read_search
        @search = Yast::UI.QueryWidget(Id(:search), :Value)
        log.info "Search string set to '#{@search}'"
      end

      # Reads the journal entries from the system
      def read_journal_entries
        query = journal_query(@filter)
        @journal_entries = query.entries
        log.info "Command '#{query.command}' returned #{@journal_entries.size} entries."
      end
    end
  end
end
