require 'yast'
require 'systemd_journal/dialog_helpers'
require 'systemd_journal/dialog_filter'

Yast.import "UI"
Yast.import "Label"

module SystemdJournal
  # Dialog allowing the user to set the filter used to display the journal
  # entries in SystemdJournal::ViewLogDialog
  class FilterDialog

    include Yast::UIShortcuts
    include Yast::I18n
    include DialogHelpers

    INPUT_WIDTH = 20

    def initialize(filter)
      @filter = filter
    end

    # Displays the dialog and returns user's selection of filter options.
    #
    # @return [DialogFilter] nil if user cancelled
    def run
      return nil unless create_dialog

      begin
        case Yast::UI.UserInput.to_sym
        when :cancel
          nil
        when :ok
          filter_from_widgets
        else
          raise "Unexpected input #{input}"
        end
      ensure
          Yast::UI.CloseDialog
      end
    end

  private

    # Translates the value of the widgets to a new DialogFilter object
    def filter_from_widgets
      filter = @filter.dup
      filter.time = Yast::UI.QueryWidget(Id(:time), :CurrentButton)
      filter.source = Yast::UI.QueryWidget(Id(:source), :CurrentButton)

      if filter.time == :dates
        filter.since = time_from_widgets_for(:since)
        filter.until = time_from_widgets_for(:until)
      end

      case filter.source
      when :unit
        filter.unit = Yast::UI.QueryWidget(Id(:unit_field), :Value)
      when :file
        filter.file = Yast::UI.QueryWidget(Id(:file_field), :Value)
      end

      filter
    end

    # Draws the dialog
    def create_dialog
      Yast::UI.OpenDialog(
        VBox(
          # Header
          Heading(_("Journal filter")),
          # Time options
          Frame(
            _("When"),
            RadioButtonGroup(
              Id(:time),
              VBox(*time_buttons)
            )
          ),
          VSpacing(0.3),
          # Source options
          Frame(
            _("Generated by"),
            RadioButtonGroup(
              Id(:source),
              VBox(*source_buttons)
            )
          ),
          VSpacing(0.3),
          # Footer buttons
          HBox(
            PushButton(Id(:cancel), Yast::Label.CancelButton),
            PushButton(Id(:ok), Yast::Label.OKButton)
          )
        )
      )
    end

    # Array of radio buttons to select the time frame
    def time_buttons
      options = [
        [:current_boot, _("Since system's boot")],
        [:previous_boot, _("On previous boot")],
        [:dates, _("Between these dates"), HSpacing(1), *dates_widgets]
      ]
      radio_buttons_for(options, value: @filter.time)
    end

    # Array of radio buttons to select the source
    def source_buttons
      options = [
        [:all, _("Any source")],     
        [:unit, _("This systemd unit"), HSpacing(1), unit_widget],
        [:file, _("This file (executable or device)"), HSpacing(1), file_widget]
      ]
      radio_buttons_for(options, value: @filter.source)
    end

    # Array of widgets for selecting date/time thresholds
    def dates_widgets
      [
        *time_widgets_for(:since, @filter.since),
        Label("-"),
        *time_widgets_for(:until, @filter.until)
      ]
    end

    # Widget to set the unit
    def unit_widget
      MinWidth(INPUT_WIDTH, InputField(Id(:unit_field), "", @filter.unit))
    end

    # Widget to set the file
    def file_widget
      MinWidth(INPUT_WIDTH, InputField(Id(:file_field), "", @filter.file))
    end
  end
end

